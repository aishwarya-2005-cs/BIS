import random
import math



def GWO(objective_function, dim, search_agents=20, max_iter=500, lb=-10, ub=10):
    
    Alpha_pos = [0.0] * dim
    Alpha_score = float("inf")

    Beta_pos = [0.0] * dim
    Beta_score = float("inf")

    Delta_pos = [0.0] * dim
    Delta_score = float("inf")

   
    Positions = [[random.uniform(lb, ub) for _ in range(dim)] for _ in range(search_agents)]

   
    for t in range(max_iter):
        for i in range(search_agents):
            
            Positions[i] = [max(min(x, ub), lb) for x in Positions[i]]

           
            fitness = objective_function(Positions[i])

           
            if fitness < Alpha_score:
                Alpha_score = fitness
                Alpha_pos = Positions[i][:]
            elif fitness < Beta_score:
                Beta_score = fitness
                Beta_pos = Positions[i][:]
            elif fitness < Delta_score:
                Delta_score = fitness
                Delta_pos = Positions[i][:]

       
        a = 2 - t * (2 / max_iter)

        
        for i in range(search_agents):
            for j in range(dim):
               
                r1, r2 = random.random(), random.random()
                A1 = 2 * a * r1 - a
                C1 = 2 * r2
                D_alpha = abs(C1 * Alpha_pos[j] - Positions[i][j])
                X1 = Alpha_pos[j] - A1 * D_alpha

               
                r1, r2 = random.random(), random.random()
                A2 = 2 * a * r1 - a
                C2 = 2 * r2
                D_beta = abs(C2 * Beta_pos[j] - Positions[i][j])
                X2 = Beta_pos[j] - A2 * D_beta

                
                r1, r2 = random.random(), random.random()
                A3 = 2 * a * r1 - a
                C3 = 2 * r2
                D_delta = abs(C3 * Delta_pos[j] - Positions[i][j])
                X3 = Delta_pos[j] - A3 * D_delta

                
                Positions[i][j] = (X1 + X2 + X3) / 3.0

    return Alpha_score, Alpha_pos



if __name__ == "__main__":
    
    def sphere(x):
        return sum([xi ** 2 for xi in x])

    best_score, best_pos = GWO(sphere, dim=5, search_agents=30, max_iter=100, lb=-10, ub=10)

    print("Best Score:", best_score)
    print("Best Position:", best_pos)
