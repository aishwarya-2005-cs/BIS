import random

# Objective Function (Sphere: minimize sum(x^2))
def objective(x):
    return sum(xi**2 for xi in x)

# Parameters
POP_SIZE, GENE_LEN, MAX_GEN = 30, 5, 5
CROSS_RATE, MUT_RATE = 0.8, 0.1
BOUNDS = (-10, 10)

# Initialize Population
def init_pop():
    return [[random.uniform(*BOUNDS) for _ in range(GENE_LEN)] for _ in range(POP_SIZE)]

# Selection (Tournament)
def select(pop, fit):
    i, j = random.sample(range(len(pop)), 2)
    return pop[i] if fit[i] < fit[j] else pop[j]

# Crossover & Mutation
def crossover(p1, p2):
    if random.random() < CROSS_RATE:
        pt = random.randint(1, GENE_LEN-1)
        return p1[:pt] + p2[pt:], p2[:pt] + p1[pt:]
    return p1[:], p2[:]

def mutate(ind):
    return [random.uniform(*BOUNDS) if random.random() < MUT_RATE else g for g in ind]

# Main GEA
def GEA():
    pop = init_pop()
    best, best_val = None, float("inf")

    for gen in range(MAX_GEN):
        fit = [objective(ind) for ind in pop]
        for i, f in enumerate(fit):
            if f < best_val: best, best_val = pop[i], f

        new_pop = []
        while len(new_pop) < POP_SIZE:
            p1, p2 = select(pop, fit), select(pop, fit)
            c1, c2 = crossover(p1, p2)
            new_pop += [mutate(c1), mutate(c2)]
        pop = new_pop[:POP_SIZE]

        print(f"Gen {gen+1}: Best = {best_val:.6f}")

    return best, best_val

# Run
if __name__ == "__main__":
    sol, val = GEA()
    print("\nBest Solution:", sol)
    print("Best Value:", val)
