import random
import math


def objective_function(x):
    return sum([xi**2 for xi in x])

class Particle:
    def __init__(self, dim, bounds):
        self.position = [random.uniform(bounds[i][0], bounds[i][1]) for i in range(dim)]
        self.velocity = [random.uniform(-1, 1) for _ in range(dim)]
        self.best_position = list(self.position)
        self.best_value = objective_function(self.position)

    def update_velocity(self, global_best, w=0.5, c1=1.5, c2=1.5):
        for i in range(len(self.velocity)):
            r1, r2 = random.random(), random.random()
            cognitive = c1 * r1 * (self.best_position[i] - self.position[i])
            social = c2 * r2 * (global_best[i] - self.position[i])
            self.velocity[i] = w * self.velocity[i] + cognitive + social

    def update_position(self, bounds):
        for i in range(len(self.position)):
            self.position[i] += self.velocity[i]
            
            if self.position[i] < bounds[i][0]:
                self.position[i] = bounds[i][0]
            elif self.position[i] > bounds[i][1]:
                self.position[i] = bounds[i][1]

        value = objective_function(self.position)
        if value < self.best_value:
            self.best_value = value
            self.best_position = list(self.position)

def PSO(num_particles, dim, bounds, max_iter):
    
    particles = [Particle(dim, bounds) for _ in range(num_particles)]
    global_best = min(particles, key=lambda p: p.best_value)
    global_best_position = list(global_best.best_position)
    global_best_value = global_best.best_value

    for iteration in range(max_iter):
        for particle in particles:
            particle.update_velocity(global_best_position)
            particle.update_position(bounds)

            if particle.best_value < global_best_value:
                global_best_value = particle.best_value
                global_best_position = list(particle.best_position)

        print(f"Iteration {iteration+1}/{max_iter}, Best Value: {global_best_value}")

    return global_best_position, global_best_value


if __name__ == "__main__":
    dim = 2  
    bounds = [(-10, 10), (-10, 10)]  
    best_pos, best_val = PSO(num_particles=30, dim=dim, bounds=bounds, max_iter=10)
    print("Best Position:", best_pos)
    print("Best Value:", best_val)
